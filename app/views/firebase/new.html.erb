<head>
  <script src="https://cdn.firebase.com/libs/firebaseui/3.5.2/firebaseui.js"></script>
  <link type="text/css" rel="stylesheet" href="https://cdn.firebase.com/libs/firebaseui/3.5.2/firebaseui.css" />
</head>
<body>
  <p id="notice"><%= notice %></p>
  <div class="border-bottom">
    <div class="row px-3 mx-5 pt-3 pb-4">
      <h1 class="col-md-7 px-0">comm-list</h1>
      <div class="col-md-5 d-flex align-items-center px-0">
        <div class="col-md-12 px-0">
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-5">
  　<div class="mx-auto">
  　  <div class="card" style="width: 20rem;">
  　    <div class="row">
  　      <h4 class="mx-auto mt-4 font-weight-bold">ログイン</h4>
  　    </div>
  　    <div class="card-body mt-0 pt-0">
  　      <div class="row">
            <div id="firebaseui-auth-container" class="m-0 p-0 mx-auto"></div>
            <p class="card-text mx-auto text-secondary px-3 pt-3">新規の方もこちらからGoogleアカウントでログインできます。</p>
          <div id="loader">Loading...</div>
  　    </div>
  　  </div>
  　</div>
  </div>

  </div>

  <script>
    $(document).on('turbolinks:render', function() {location.reload()});
    
    var firebaseConfig = {
      apiKey: "AIzaSyDfZ0p6ysbml7IByXoXC-2-1BGmRlS-61k",
      authDomain: "comm-list.firebaseapp.com",
      databaseURL: "https://comm-list.firebaseio.com",
      projectId: "comm-list",
      storageBucket: "comm-list.appspot.com",
      messagingSenderId: "383913072943",
      appId: "1:383913072943:web:94089ff7b73cf69c8529da",
      measurementId: "G-1LYEQJK8LQ"
    };
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);

    // firebase.jsで対応
    firebase.analytics();

    const firebaseLogin = () => {
      const ui = firebaseui.auth.AuthUI.getInstance() || new firebaseui.auth.AuthUI(firebase.auth());
      const uiConfig = {
        callbacks: {
          signInSuccessWithAuthResult: (authResult, redirectUrl) => {
            authResult.user.getIdToken(true)
            .then((idToken) => { railsLogin(authResult.additionalUserInfo.isNewUser, idToken, authResult.additionalUserInfo) })
            .catch((error)  => { console.log(`Firebase getIdToken failed!: ${error.message}`) });
            return false; // firebase側にログイン後はリダイレクトせず、railsへajaxでリクエストを送る
          },
          uiShown: () => { document.getElementById('loader').style.display = 'none' }
        },
        signInFlow: 'redirect',
        signInOptions: [
          firebase.auth.TwitterAuthProvider.PROVIDER_ID, // Google認証
        ],
      };
      // ログイン画面表示
      ui.start('#firebaseui-auth-container', uiConfig);
    }
      
    const csrfTokenObj = () => {
      return { "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr('content') };
    }
      
    const authorizationObj = (idToken) => {
      return { "Authorization": `Bearer ${idToken}` };
    }
      
    const railsLogin = (isNewUser, idToken, userInfo) => {
      const url = isNewUser ? "/accounts" : "/login";
      const headers = Object.assign(csrfTokenObj(), authorizationObj(idToken));
      $.ajax({url: url, type: "POST", headers: headers, data: {
        twitter_user: {
          screen_name: userInfo.username
        }}
      }).done((data) => { console.log("Rails login!")      })
        .fail((data) => { console.log("Rails login failed!") });
    }

    firebaseLogin()
  </script>
</body>
